import React, { createContext, useContext, useState, useEffect } from 'react';
import { ENDPOINTS } from '../services/api/endpoints';

//Whole component generated by ChatGPT 4o and Claude AI 

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);


    const fetchUser = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) throw new Error("No token");

      const res = await fetch(ENDPOINTS.AUTH.ME, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!res.ok) throw new Error("Not authenticated");

      const data = await res.json();
      setUser(data);
    } catch {
      setUser(null);
      localStorage.removeItem('authToken');
    } finally {
      setLoading(false);
    }
  };

  //Helper function to handle aut headers automatically, generated by Claude AI 
  const authenticatedFetch = async (url, options = {}) => {
    const token = localStorage.getItem('authToken');
    
    const config = {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      }
    };

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    const response = await fetch(url, config);
    
    if (response.status === 401) {
      localStorage.removeItem('authToken');
      setUser(null);
    }
    
    return response;
  };
  //Usage: 
  // const getOrders = async () => {
  //   const response = await authenticatedFetch('https://orderservice.com/api/orders');
  //   return response.json();
  // };

  // const createEvent = async (eventData) => {
  //   const response = await authenticatedFetch('https://eventservice.com/api/events', {
  //     method: 'POST',
  //     body: JSON.stringify(eventData)
  //   });
  //   return response.json();
  // };

  useEffect(() => {
    fetchUser();
  }, []);

  const logout = () => {
    localStorage.removeItem('authToken');
    setUser(null);
  };

  return (
  <AuthContext.Provider value={{ user, setUser, loading, logout, authenticatedFetch }}>
    {children}
  </AuthContext.Provider>
);
};

// âœ… Named export
export const useAuth = () => useContext(AuthContext);