import React, { createContext, useContext, useState, useEffect } from 'react';
import { ENDPOINTS } from '../services/api/endpoints';

//Whole component generated by ChatGPT 4o and Claude AI 

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  const fetchUser = async () => {
  try {
    const token = localStorage.getItem('authToken');
    if (!token) throw new Error("No token");

    const userRes = await fetch(ENDPOINTS.AUTH.ME, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!userRes.ok) throw new Error("Not authenticated");

    const userData = await userRes.json();
    
    try {
      const profileRes = await fetch(ENDPOINTS.PROFILES.GET, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (profileRes.ok) {
        const profileData = await profileRes.json();
        // Combine user data with profile data
        setUser({
          ...userData,
          profile: profileData,
          displayName: profileData.firstName && profileData.lastName 
            ? `${profileData.firstName} ${profileData.lastName}` 
            : userData.email
        });
      } else {
        // Profile doesn't exist yet (user hasn't completed profile)
        setUser({
          ...userData,
          profile: null,
          displayName: userData.email
        });
      }
    } catch (profileError) {
      // If profile fetch fails, just use user data without profile
      setUser({
        ...userData,
        profile: null,
        displayName: userData.email
      });
    }
  } catch (authError) {
    // If auth fails, clear everything
    setUser(null);
    localStorage.removeItem('authToken');
  } finally {
    setLoading(false);
  }
};

  const login = async (token) => {
    localStorage.setItem('authToken', token);
    await fetchUser();
  };

  //Helper function to handle aut headers automatically, generated by Claude AI 
  const authenticatedFetch = async (url, options = {}) => {
    const token = localStorage.getItem('authToken');
    
    const config = {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      }
    };

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    const response = await fetch(url, config);
    
    if (response.status === 401) {
      localStorage.removeItem('authToken');
      setUser(null);
    }
    
    return response;
  };

  useEffect(() => {
    fetchUser();
  }, []);

  const logout = () => {
    localStorage.removeItem('authToken');
    setUser(null);
  };

  return (
  <AuthContext.Provider value={{ user, fetchUser, setUser, loading, logout, authenticatedFetch, login }}>
    {children}
  </AuthContext.Provider>
);
};

// âœ… Named export
export const useAuth = () => useContext(AuthContext);